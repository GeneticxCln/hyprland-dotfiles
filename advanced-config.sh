#!/bin/bash

# Advanced Hyprland Configuration Script
# Keybinds, Window Rules, Rainbow Edges & Effects
# Based on JaKooLit's approach with extensive enhancements

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Logging functions
log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }

# Create advanced keybinds configuration
create_keybinds_config() {
    log "Creating advanced keybinds configuration..."
    
    mkdir -p "$HOME/.config/hypr"
    
    cat > "$HOME/.config/hypr/keybinds.conf" << 'EOF'
# Advanced Hyprland Keybinds Configuration
# Generated by advanced-config.sh

# Main modifier
$mainMod = SUPER
$altMod = ALT

# ===== APPLICATION SHORTCUTS =====
bind = $mainMod, Q, exec, kitty
bind = $mainMod, Return, exec, alacritty
bind = $mainMod SHIFT, Return, exec, foot
bind = $mainMod, E, exec, thunar
bind = $mainMod SHIFT, E, exec, nautilus
bind = $mainMod, R, exec, rofi -show drun
bind = $mainMod, Space, exec, rofi -show drun
bind = $mainMod SHIFT, R, exec, rofi -show run
bind = $mainMod $altMod, R, exec, rofi -show window
bind = $mainMod, B, exec, firefox
bind = $mainMod SHIFT, B, exec, google-chrome-stable
bind = $mainMod, C, exec, code
bind = $mainMod SHIFT, C, exec, cursor

# ===== WINDOW MANAGEMENT =====
bind = $mainMod, W, killactive
bind = $mainMod SHIFT, Q, killactive
bind = $mainMod, M, exit
bind = $mainMod SHIFT, M, exec, wlogout
bind = $mainMod, F, fullscreen, 0
bind = $mainMod SHIFT, F, fullscreen, 1
bind = $mainMod, T, togglefloating
bind = $mainMod, P, pseudo
bind = $mainMod, S, togglesplit
bind = $mainMod, G, togglegroup
bind = $mainMod, Tab, changegroupactive

# ===== FOCUS MOVEMENT =====
# Vim-style
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# ===== WINDOW MOVEMENT =====
# Vim-style
bind = $mainMod SHIFT, H, movewindow, l
bind = $mainMod SHIFT, L, movewindow, r
bind = $mainMod SHIFT, K, movewindow, u
bind = $mainMod SHIFT, J, movewindow, d

# Arrow keys
bind = $mainMod SHIFT, left, movewindow, l
bind = $mainMod SHIFT, right, movewindow, r
bind = $mainMod SHIFT, up, movewindow, u
bind = $mainMod SHIFT, down, movewindow, d

# ===== WINDOW RESIZING =====
bind = $mainMod CTRL, H, resizeactive, -20 0
bind = $mainMod CTRL, L, resizeactive, 20 0
bind = $mainMod CTRL, K, resizeactive, 0 -20
bind = $mainMod CTRL, J, resizeactive, 0 20

bind = $mainMod CTRL, left, resizeactive, -20 0
bind = $mainMod CTRL, right, resizeactive, 20 0
bind = $mainMod CTRL, up, resizeactive, 0 -20
bind = $mainMod CTRL, down, resizeactive, 0 20

# ===== WORKSPACE NAVIGATION =====
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Special workspaces
bind = $mainMod, grave, togglespecialworkspace, magic
bind = $mainMod SHIFT, grave, movetoworkspace, special:magic

# Workspace cycling
bind = $mainMod, bracketright, workspace, e+1
bind = $mainMod, bracketleft, workspace, e-1
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# ===== MOVE TO WORKSPACE =====
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# ===== SCREENSHOTS =====
bind = , Print, exec, grim -g "$(slurp)" - | swappy -f -
bind = SHIFT, Print, exec, grim ~/Pictures/Screenshots/screenshot-$(date +%Y%m%d-%H%M%S).png
bind = $mainMod, Print, exec, grim -g "$(slurp)" ~/Pictures/Screenshots/screenshot-$(date +%Y%m%d-%H%M%S).png
bind = $mainMod SHIFT, Print, exec, grim - | wl-copy
bind = $mainMod $altMod, Print, exec, hyprshot -m region
bind = CTRL, Print, exec, hyprshot -m output
bind = CTRL SHIFT, Print, exec, hyprshot -m window

# ===== MEDIA CONTROLS =====
bind = , XF86AudioRaiseVolume, exec, pamixer -i 5
bind = , XF86AudioLowerVolume, exec, pamixer -d 5
bind = , XF86AudioMute, exec, pamixer --toggle-mute
bind = , XF86AudioPlay, exec, playerctl play-pause
bind = , XF86AudioPause, exec, playerctl play-pause
bind = , XF86AudioNext, exec, playerctl next
bind = , XF86AudioPrev, exec, playerctl previous
bind = , XF86AudioStop, exec, playerctl stop

# ===== BRIGHTNESS CONTROLS =====
bind = , XF86MonBrightnessUp, exec, brightnessctl set +5%
bind = , XF86MonBrightnessDown, exec, brightnessctl set 5%-

# ===== SYSTEM CONTROLS =====
bind = $mainMod, L, exec, hyprlock
bind = $mainMod SHIFT, S, exec, systemctl suspend
bind = $mainMod CTRL, R, exec, hyprctl reload

# ===== UTILITIES =====
bind = $mainMod, V, exec, cliphist list | rofi -dmenu | cliphist decode | wl-copy
bind = $mainMod, period, exec, rofimoji
bind = $mainMod, N, exec, dunstctl history-pop
bind = $mainMod SHIFT, N, exec, dunstctl close-all
bind = $mainMod, semicolon, exec, hyprpicker -a
bind = $mainMod $altMod, W, exec, ~/.config/hypr/scripts/change-wallpaper.sh
bind = $mainMod $altMod, T, exec, ~/.config/hypr/scripts/toggle-theme.sh

# ===== WINDOW LAYOUT CONTROLS =====
bind = $mainMod, A, togglesplit
bind = $mainMod SHIFT, A, layoutmsg, swapwithmaster
bind = $mainMod $altMod, A, layoutmsg, addmaster
bind = $mainMod CTRL SHIFT, A, layoutmsg, removemaster

# Dwindle layout specific
bind = $mainMod $altMod, P, layoutmsg, togglesplit
bind = $mainMod $altMod, H, layoutmsg, preselect l
bind = $mainMod $altMod, J, layoutmsg, preselect d
bind = $mainMod $altMod, K, layoutmsg, preselect u
bind = $mainMod $altMod, L, layoutmsg, preselect r

# ===== MOUSE BINDINGS =====
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
bindm = $mainMod SHIFT, mouse:272, resizewindow

# ===== SPECIAL EFFECTS =====
bind = $mainMod $altMod, F, exec, ~/.config/hypr/scripts/toggle-effects.sh
bind = $mainMod $altMod, B, exec, ~/.config/hypr/scripts/toggle-rainbow.sh
bind = $mainMod $altMod, O, exec, ~/.config/hypr/scripts/toggle-opacity.sh

# ===== GAMING MODE =====
bind = $mainMod, F12, exec, ~/.config/hypr/scripts/gaming-mode.sh
EOF
    
    success "Advanced keybinds configuration created at ~/.config/hypr/keybinds.conf"
}

# Create window rules configuration
create_window_rules() {
    log "Creating comprehensive window rules..."
    
    cat > "$HOME/.config/hypr/windowrules.conf" << 'EOF'
# Comprehensive Window Rules Configuration
# Generated by advanced-config.sh

# ===== FLOATING WINDOWS =====
windowrule = float, ^(pavucontrol)$
windowrule = float, ^(blueman-manager)$
windowrule = float, ^(nm-connection-editor)$
windowrule = float, ^(firefox)$ # Firefox PiP
windowrule = float, title:^(Picture-in-Picture)$
windowrule = float, title:^(Volume Control)$
windowrule = float, title:^(Bluetooth Devices)$
windowrule = float, title:^(Network Connections)$
windowrule = float, ^(xdg-desktop-portal-gtk)$
windowrule = float, ^(org.gnome.Calculator)$
windowrule = float, ^(org.gnome.Nautilus)$ # File picker
windowrule = float, ^(file-roller)$
windowrule = float, ^(archive-manager)$
windowrule = float, ^(nemo)$
windowrule = float, ^(thunar)$
windowrule = float, title:^(Open File)$
windowrule = float, title:^(Save File)$
windowrule = float, title:^(Save As)$
windowrule = float, title:^(Open Folder)$

# ===== DIALOG BOXES =====
windowrule = float, title:^(About)$
windowrule = float, title:^(Preferences)$
windowrule = float, title:^(Settings)$
windowrule = float, title:^(Properties)$
windowrule = float, title:^(Confirm)$
windowrule = float, title:^(Dialog)$
windowrule = float, title:^(Error)$
windowrule = float, title:^(Warning)$

# ===== SIZE AND POSITION =====
windowrule = size 800 600, ^(pavucontrol)$
windowrule = size 900 700, ^(blueman-manager)$
windowrule = size 1000 800, ^(nm-connection-editor)$
windowrule = size 500 400, ^(org.gnome.Calculator)$
windowrule = center, ^(pavucontrol)$
windowrule = center, ^(blueman-manager)$
windowrule = center, ^(nm-connection-editor)$

# ===== WORKSPACE ASSIGNMENTS =====
windowrule = workspace 1, ^(firefox)$
windowrule = workspace 1, ^(google-chrome)$
windowrule = workspace 1, ^(chromium)$
windowrule = workspace 2, ^(code)$
windowrule = workspace 2, ^(Code)$
windowrule = workspace 2, ^(cursor)$
windowrule = workspace 2, ^(neovim)$
windowrule = workspace 3, ^(thunar)$
windowrule = workspace 3, ^(nemo)$
windowrule = workspace 3, ^(nautilus)$
windowrule = workspace 4, ^(discord)$
windowrule = workspace 4, ^(telegram)$
windowrule = workspace 4, ^(whatsapp)$
windowrule = workspace 5, ^(spotify)$
windowrule = workspace 5, ^(vlc)$
windowrule = workspace 5, ^(mpv)$
windowrule = workspace 6, ^(gimp)$
windowrule = workspace 6, ^(inkscape)$
windowrule = workspace 6, ^(blender)$
windowrule = workspace 7, ^(obs)$
windowrule = workspace 7, ^(kdenlive)$
windowrule = workspace 8, ^(steam)$
windowrule = workspace 8, ^(lutris)$
windowrule = workspace 8, ^(heroic)$
windowrule = workspace 9, ^(virt-manager)$
windowrule = workspace 9, ^(virtualbox)$

# ===== OPACITY SETTINGS =====
windowrule = opacity 0.95 0.95, ^(kitty)$
windowrule = opacity 0.95 0.95, ^(alacritty)$
windowrule = opacity 0.90 0.90, ^(thunar)$
windowrule = opacity 0.90 0.90, ^(nemo)$
windowrule = opacity 0.95 0.95, ^(code)$
windowrule = opacity 0.90 0.90, ^(rofi)$
windowrule = opacity 0.80 0.80, ^(waybar)$

# ===== GAMING RULES =====
windowrule = fullscreen, ^(steam_app_).*
windowrule = monitor 0, ^(steam_app_).*
windowrule = workspace 8, ^(steam_app_).*
windowrule = fullscreen, title:^(.* - Wine desktop)$
windowrule = immediate, ^(steam_app_).*
windowrule = immediate, title:^(.* - Wine desktop)$

# ===== MEDIA RULES =====
windowrule = float, title:^(Picture-in-Picture)$
windowrule = pin, title:^(Picture-in-Picture)$
windowrule = size 400 225, title:^(Picture-in-Picture)$
windowrule = move 75% 75%, title:^(Picture-in-Picture)$

# ===== SPECIAL APPLICATIONS =====
windowrule = tile, ^(spotify)$
windowrule = tile, ^(discord)$
windowrule = float, ^(org.gnome.Polkit)$
windowrule = float, ^(polkit-gnome-authentication-agent-1)$
windowrule = size 400 300, ^(org.gnome.Polkit)$
windowrule = center, ^(org.gnome.Polkit)$

# ===== DEVELOPMENT TOOLS =====
windowrule = workspace 2, title:^(.*Visual Studio Code)$
windowrule = workspace 2, ^(jetbrains-.*)$
windowrule = workspace 2, ^(idea)$
windowrule = workspace 2, ^(pycharm)$
windowrule = workspace 2, ^(webstorm)$

# ===== NOTIFICATION AREA =====
windowrule = float, ^(dunst)$
windowrule = noborder, ^(dunst)$
windowrule = noshadow, ^(dunst)$

# ===== WINDOW RULES V2 (More Advanced) =====
windowrulev2 = float, class:^(pavucontrol)$
windowrulev2 = float, class:^(org\.gnome\.Calculator)$
windowrulev2 = float, class:^(org\.gnome\.Nautilus)$, title:^(Open)$
windowrulev2 = float, class:^(firefox)$, title:^(Library)$
windowrulev2 = float, class:^(firefox)$, title:^(Picture-in-Picture)$
windowrulev2 = pin, class:^(firefox)$, title:^(Picture-in-Picture)$
windowrulev2 = noborder, class:^(firefox)$, title:^(Picture-in-Picture)$
windowrulev2 = float, class:^(steam)$, title:^(Friends List)$
windowrulev2 = float, class:^(steam)$, title:^(Steam Settings)$

# ===== INHIBIT IDLE =====
windowrulev2 = idleinhibit focus, class:^(firefox)$, title:^(.*YouTube.*)$
windowrulev2 = idleinhibit focus, class:^(firefox)$, title:^(.*Twitch.*)$
windowrulev2 = idleinhibit focus, class:^(firefox)$, title:^(.*Netflix.*)$
windowrulev2 = idleinhibit focus, class:^(mpv)$
windowrulev2 = idleinhibit focus, class:^(vlc)$
windowrulev2 = idleinhibit always, class:^(steam_app_.*)$

# ===== MAXIMIZE SPECIFIC APPS =====
windowrulev2 = maximize, class:^(libreoffice.*)$
windowrulev2 = maximize, class:^(gimp.*)$
windowrulev2 = maximize, class:^(inkscape)$
windowrulev2 = maximize, class:^(blender)$
EOF
    
    success "Window rules configuration created at ~/.config/hypr/windowrules.conf"
}

# Create rainbow border effects
create_rainbow_effects() {
    log "Creating rainbow border effects configuration..."
    
    cat > "$HOME/.config/hypr/rainbow.conf" << 'EOF'
# Rainbow Border Effects Configuration
# Generated by advanced-config.sh

# ===== RAINBOW BORDER CONFIGURATION =====
decoration {
    # Rainbow borders
    col.active_border = rgb(ff5e5b) rgb(ffb347) rgb(ffd93d) rgb(6bcf7f) rgb(4d96ff) rgb(9b59b6) rgb(f8c291) 45deg
    col.inactive_border = rgba(595959aa)
    
    # Advanced border settings
    active_opacity = 1.0
    inactive_opacity = 0.95
    fullscreen_opacity = 1.0
    
    # Enhanced shadows with rainbow glow
    drop_shadow = true
    shadow_range = 20
    shadow_render_power = 3
    shadow_offset = 0, 0
    col.shadow = rgba(ff5e5bee)
    col.shadow_inactive = rgba(59595955)
    
    # Blur effects
    blur {
        enabled = true
        size = 8
        passes = 3
        new_optimizations = true
        xray = false
        ignore_opacity = true
        noise = 0.0117
        contrast = 1.5
        brightness = 1.2
        vibrancy = 0.21
        vibrancy_darkness = 0.0
        special = true
        popups = true
    }
    
    # Advanced decoration
    rounding = 12
    multisample_edges = true
    
    # Dim settings
    dim_inactive = true
    dim_strength = 0.1
    dim_special = 0.5
    dim_around = 0.4
}

# ===== RAINBOW ANIMATION CURVES =====
bezier = rainbow, 0.25, 0.46, 0.45, 0.94
bezier = rainbowOut, 0.55, 0.06, 0.68, 0.19
bezier = rainbowInOut, 0.68, -0.55, 0.265, 1.55

# ===== ENHANCED ANIMATIONS =====
animations {
    enabled = true
    first_launch_animation = true
    
    # Window animations with rainbow effects
    animation = windows, 1, 8, rainbow, slide
    animation = windowsIn, 1, 8, rainbow, slide
    animation = windowsOut, 1, 8, rainbowOut, popin 80%
    animation = windowsMove, 1, 8, rainbow, slide
    
    # Fade animations
    animation = fade, 1, 10, rainbow
    animation = fadeIn, 1, 10, rainbow
    animation = fadeOut, 1, 8, rainbowOut
    animation = fadeSwitch, 1, 8, rainbow
    animation = fadeShadow, 1, 8, rainbow
    animation = fadeDim, 1, 8, rainbow
    animation = fadeLayers, 1, 8, rainbow
    
    # Border animations
    animation = border, 1, 15, rainbow
    animation = borderangle, 1, 20, rainbowInOut, loop
    
    # Workspace animations
    animation = workspaces, 1, 6, rainbow, slide
    animation = specialWorkspace, 1, 8, rainbow, slidevert
    
    # Layer animations
    animation = layers, 1, 8, rainbow, slide
    animation = layersIn, 1, 8, rainbow, slide
    animation = layersOut, 1, 8, rainbowOut, slide
}

# ===== LAYERRULE FOR RAINBOW EFFECTS =====
layerrule = blur, waybar
layerrule = blur, rofi
layerrule = blur, notifications
layerrule = blur, logout_dialog
layerrule = ignorezero, waybar
layerrule = ignorezero, rofi
layerrule = ignorezero, notifications

# ===== GROUP DECORATION =====
group {
    col.border_active = rgb(ff5e5b) rgb(ffb347) rgb(ffd93d) rgb(6bcf7f) rgb(4d96ff) rgb(9b59b6) 45deg
    col.border_inactive = rgba(595959aa)
    col.border_locked_active = rgb(ff6b6b) rgb(feca57) rgb(ff9ff3) rgb(54a0ff) 45deg
    col.border_locked_inactive = rgba(59595955)
    
    groupbar {
        enabled = true
        font_family = JetBrains Mono Nerd Font
        font_size = 11
        gradients = true
        height = 18
        priority = 3
        render_titles = true
        scrolling = true
        text_color = rgba(ffffffff)
        col.active = rgb(ff5e5b) rgb(ffb347) rgb(ffd93d) rgb(6bcf7f) rgb(4d96ff) rgb(9b59b6) 45deg
        col.inactive = rgba(595959aa)
        col.locked_active = rgb(ff6b6b) rgb(feca57) rgb(ff9ff3) rgb(54a0ff) 45deg
        col.locked_inactive = rgba(59595955)
    }
}

# ===== MISC RAINBOW SETTINGS =====
misc {
    # Rainbow cursor
    animate_manual_resizes = true
    animate_mouse_windowdragging = true
    disable_hyprland_logo = true
    disable_splash_rendering = true
    mouse_move_enables_dpms = true
    key_press_enables_dpms = true
    always_follow_on_dnd = true
    layers_hog_keyboard_focus = true
    focus_on_activate = true
    no_direct_scanout = false
    hide_cursor_on_touch = true
    mouse_move_focuses_monitor = true
    render_ahead_of_time = false
    render_ahead_safezone = 1
    allow_tearing = true
    
    # Window swallowing
    enable_swallow = true
    swallow_regex = ^(kitty|alacritty|foot)$
    swallow_exception_regex = ^(wev)$
    
    # Background color with slight rainbow tint
    background_color = rgba(111111ff)
    
    # New window rules
    new_window_takes_over_fullscreen = 1
    initial_workspace_tracking = 1
    middle_click_paste = true
    
    # VRR (Variable Refresh Rate)
    vrr = 2
    vfr = true
    
    # Force default wallpaper
    force_default_wallpaper = 0
    splash_font_family = JetBrains Mono Nerd Font
    
    # Close special on empty
    close_special_on_empty = true
    
    # Suppress portal warnings
    suppress_portal_warnings = false
}
EOF
    
    success "Rainbow effects configuration created at ~/.config/hypr/rainbow.conf"
}

# Create utility scripts
create_utility_scripts() {
    log "Creating utility scripts for advanced features..."
    
    mkdir -p "$HOME/.config/hypr/scripts"
    
    # Toggle rainbow effects script
    cat > "$HOME/.config/hypr/scripts/toggle-rainbow.sh" << 'EOF'
#!/bin/bash

CONFIG_FILE="$HOME/.config/hypr/hyprland.conf"
RAINBOW_CONFIG="$HOME/.config/hypr/rainbow.conf"

if grep -q "source.*rainbow.conf" "$CONFIG_FILE"; then
    # Disable rainbow
    sed -i '/source.*rainbow.conf/d' "$CONFIG_FILE"
    hyprctl keyword decoration:col.active_border "rgba(33ccffee) rgba(00ff99ee) 45deg"
    hyprctl keyword decoration:col.inactive_border "rgba(595959aa)"
    hyprctl keyword animation:borderangle "1, 8, default"
    notify-send "Rainbow Effects" "Disabled" -i preferences-desktop-theme
else
    # Enable rainbow
    echo "source = ~/.config/hypr/rainbow.conf" >> "$CONFIG_FILE"
    hyprctl reload
    notify-send "Rainbow Effects" "Enabled" -i preferences-desktop-theme
fi
EOF
    
    # Toggle effects script
    cat > "$HOME/.config/hypr/scripts/toggle-effects.sh" << 'EOF'
#!/bin/bash

CURRENT_BLUR=$(hyprctl getoption decoration:blur:enabled | grep "int: " | awk '{print $2}')

if [ "$CURRENT_BLUR" = "1" ]; then
    # Disable effects
    hyprctl keyword decoration:blur:enabled false
    hyprctl keyword decoration:drop_shadow false
    hyprctl keyword animations:enabled false
    notify-send "Visual Effects" "Disabled for Performance" -i preferences-system-performance
else
    # Enable effects
    hyprctl keyword decoration:blur:enabled true
    hyprctl keyword decoration:drop_shadow true
    hyprctl keyword animations:enabled true
    notify-send "Visual Effects" "Enabled" -i preferences-desktop-effects
fi
EOF
    
    # Gaming mode script
    cat > "$HOME/.config/hypr/scripts/gaming-mode.sh" << 'EOF'
#!/bin/bash

GAMING_MODE_FILE="/tmp/hyprland_gaming_mode"

if [ -f "$GAMING_MODE_FILE" ]; then
    # Exit gaming mode
    rm "$GAMING_MODE_FILE"
    
    # Re-enable effects
    hyprctl keyword decoration:blur:enabled true
    hyprctl keyword decoration:drop_shadow true
    hyprctl keyword animations:enabled true
    hyprctl keyword misc:vfr true
    hyprctl keyword decoration:dim_inactive true
    
    # Re-enable waybar
    pkill -USR1 waybar 2>/dev/null || waybar &
    
    # Normal window rules
    hyprctl keyword windowrule "opacity 0.95 0.95, ^(kitty)$"
    hyprctl keyword windowrule "opacity 0.95 0.95, ^(alacritty)$"
    
    notify-send "Gaming Mode" "Disabled - Full Desktop Experience Restored" -i applications-games
else
    # Enter gaming mode
    touch "$GAMING_MODE_FILE"
    
    # Disable unnecessary effects for performance
    hyprctl keyword decoration:blur:enabled false
    hyprctl keyword decoration:drop_shadow false
    hyprctl keyword animations:enabled false
    hyprctl keyword misc:vfr false
    hyprctl keyword decoration:dim_inactive false
    
    # Hide waybar
    pkill waybar
    
    # Maximum performance window rules
    hyprctl keyword windowrule "opacity 1.0 1.0, .*"
    
    notify-send "Gaming Mode" "Enabled - Maximum Performance" -i applications-games
fi
EOF
    
    # Change wallpaper script
    cat > "$HOME/.config/hypr/scripts/change-wallpaper.sh" << 'EOF'
#!/bin/bash

WALLPAPER_DIR="$HOME/Pictures/Wallpapers"

if [ ! -d "$WALLPAPER_DIR" ]; then
    notify-send "Wallpaper" "Wallpaper directory not found" -i dialog-error
    exit 1
fi

WALLPAPER=$(find "$WALLPAPER_DIR" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" \) | shuf -n 1)

if [ -n "$WALLPAPER" ]; then
    swww img "$WALLPAPER" --transition-type wipe --transition-duration 2
    notify-send "Wallpaper Changed" "$(basename "$WALLPAPER")" -i preferences-desktop-wallpaper
else
    notify-send "No Wallpapers Found" "Add wallpapers to $WALLPAPER_DIR" -i dialog-information
fi
EOF
    
    # Toggle theme script
    cat > "$HOME/.config/hypr/scripts/toggle-theme.sh" << 'EOF'
#!/bin/bash

THEMES=("mocha" "macchiato" "latte" "frappe" "tokyonight" "gruvbox" "nord" "rosepine")
CURRENT_THEME_FILE="$HOME/.config/hypr/.current_theme"

if [ -f "$CURRENT_THEME_FILE" ]; then
    CURRENT_THEME=$(cat "$CURRENT_THEME_FILE")
else
    CURRENT_THEME="mocha"
fi

# Find current theme index
for i in "${!THEMES[@]}"; do
    if [[ "${THEMES[$i]}" = "$CURRENT_THEME" ]]; then
        CURRENT_INDEX=$i
        break
    fi
done

# Get next theme
NEXT_INDEX=$(( (CURRENT_INDEX + 1) % ${#THEMES[@]} ))
NEXT_THEME="${THEMES[$NEXT_INDEX]}"

# Apply theme (this would need integration with your theme system)
echo "$NEXT_THEME" > "$CURRENT_THEME_FILE"
notify-send "Theme Changed" "Switched to $NEXT_THEME theme" -i preferences-desktop-theme

# You would add theme switching logic here
EOF
    
    # Toggle opacity script
    cat > "$HOME/.config/hypr/scripts/toggle-opacity.sh" << 'EOF'
#!/bin/bash

OPACITY_FILE="/tmp/hyprland_opacity_mode"

if [ -f "$OPACITY_FILE" ]; then
    # Restore normal opacity
    rm "$OPACITY_FILE"
    hyprctl keyword windowrule "opacity 0.95 0.95, ^(kitty)$"
    hyprctl keyword windowrule "opacity 0.95 0.95, ^(alacritty)$"
    hyprctl keyword windowrule "opacity 0.90 0.90, ^(thunar)$"
    hyprctl keyword windowrule "opacity 0.95 0.95, ^(code)$"
    notify-send "Window Opacity" "Normal opacity restored" -i preferences-desktop
else
    # Set full opacity
    touch "$OPACITY_FILE"
    hyprctl keyword windowrule "opacity 1.0 1.0, .*"
    notify-send "Window Opacity" "Full opacity enabled" -i preferences-desktop
fi
EOF
    
    # Make scripts executable
    chmod +x "$HOME/.config/hypr/scripts"/*.sh
    
    success "Utility scripts created in ~/.config/hypr/scripts/"
}

# Update main Hyprland config to include new features
update_main_config() {
    log "Updating main Hyprland configuration to include advanced features..."
    
    HYPR_CONFIG="$HOME/.config/hypr/hyprland.conf"
    
    # Add source lines if they don't exist
    if ! grep -q "source = ~/.config/hypr/keybinds.conf" "$HYPR_CONFIG"; then
        echo "source = ~/.config/hypr/keybinds.conf" >> "$HYPR_CONFIG"
    fi
    
    if ! grep -q "source = ~/.config/hypr/windowrules.conf" "$HYPR_CONFIG"; then
        echo "source = ~/.config/hypr/windowrules.conf" >> "$HYPR_CONFIG"
    fi
    
    # Add rainbow config as optional (user can toggle it)
    if ! grep -q "# Optional: source = ~/.config/hypr/rainbow.conf" "$HYPR_CONFIG"; then
        echo "# Optional: source = ~/.config/hypr/rainbow.conf" >> "$HYPR_CONFIG"
    fi
    
    success "Main Hyprland configuration updated"
}

# Create autostart script for advanced features
create_autostart() {
    log "Creating autostart configuration for advanced features..."
    
    cat >> "$HOME/.config/hypr/hyprland.conf" << 'EOF'

# ===== ADVANCED AUTOSTART =====
# Core services
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec-once = gnome-keyring-daemon --start --components=secrets

# Desktop components
exec-once = waybar
exec-once = dunst
exec-once = swww init
exec-once = sleep 2 && swww img ~/Pictures/Wallpapers/default.jpg

# Clipboard manager
exec-once = wl-paste --type text --watch cliphist store
exec-once = wl-paste --type image --watch cliphist store

# Network and Bluetooth
exec-once = nm-applet --indicator
exec-once = blueman-applet

# Audio
exec-once = pipewire
exec-once = pipewire-pulse

# Idle management
exec-once = hypridle

# Gaming optimizations
exec-once = gamemoded -d

# Custom scripts
exec-once = ~/.config/hypr/scripts/change-wallpaper.sh
EOF
    
    success "Autostart configuration added"
}

# Main execution
main() {
    clear
    echo -e "${PURPLE}"
    cat << "EOF"
╔══════════════════════════════════════════════════════════════════╗
║                                                                  ║
║      █████╗ ██████╗ ██╗   ██╗ █████╗ ███╗   ██╗ ██████╗███████╗ ║
║     ██╔══██╗██╔══██╗██║   ██║██╔══██╗████╗  ██║██╔════╝██╔════╝ ║
║     ███████║██║  ██║██║   ██║███████║██╔██╗ ██║██║     █████╗   ║
║     ██╔══██║██║  ██║╚██╗ ██╔╝██╔══██║██║╚██╗██║██║     ██╔══╝   ║
║     ██║  ██║██████╔╝ ╚████╔╝ ██║  ██║██║ ╚████║╚██████╗███████╗ ║
║     ╚═╝  ╚═╝╚═════╝   ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝ ║
║                                                                  ║
║         🌈 ADVANCED HYPRLAND CONFIGURATION 🌈                   ║
║                                                                  ║
║  • Advanced Keybinds           • Rainbow Border Effects         ║
║  • Comprehensive Window Rules  • Utility Scripts               ║
║  • Gaming Mode Toggle         • Theme Management               ║
║  • Visual Effects Control     • Performance Optimization      ║
║                                                                  ║
╚══════════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}\n"
    
    echo -e "${CYAN}This script will add advanced features to your Hyprland configuration:${NC}"
    echo "  • 50+ custom keybinds with vim-style navigation"
    echo "  • Comprehensive window rules for 30+ applications"
    echo "  • Rainbow border effects with animated gradients"
    echo "  • Gaming mode for maximum performance"
    echo "  • Utility scripts for theme and effect management"
    echo "  • Advanced window management and workspace controls"
    echo
    
    read -p "Continue with advanced configuration? (y/N): " -n 1 -r
    echo
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
    
    create_keybinds_config
    create_window_rules
    create_rainbow_effects
    create_utility_scripts
    update_main_config
    create_autostart
    
    echo -e "\n${GREEN}╭─────────────────────────────────────────╮${NC}"
    echo -e "${GREEN}│       🎉 ADVANCED CONFIG COMPLETE!      │${NC}"
    echo -e "${GREEN}╰─────────────────────────────────────────╯${NC}"
    echo
    echo -e "${CYAN}Advanced Features Added:${NC}"
    echo "  ✓ 50+ Custom keybinds (Vim-style + arrows)"
    echo "  ✓ 30+ Window rules for popular applications"
    echo "  ✓ Rainbow border effects with animations"
    echo "  ✓ Gaming mode toggle (Super + F12)"
    echo "  ✓ Visual effects toggle (Super + Alt + F)"
    echo "  ✓ Rainbow toggle (Super + Alt + B)"
    echo "  ✓ Theme switcher (Super + Alt + T)"
    echo "  ✓ Wallpaper changer (Super + Alt + W)"
    echo
    echo -e "${YELLOW}Key Shortcuts Added:${NC}"
    echo "  • Super + Alt + F: Toggle effects"
    echo "  • Super + Alt + B: Toggle rainbow borders"
    echo "  • Super + F12: Gaming mode"
    echo "  • Super + Alt + W: Change wallpaper"
    echo "  • Super + Alt + T: Switch theme"
    echo "  • Super + V: Clipboard history"
    echo "  • Super + ;: Color picker"
    echo
    echo -e "${CYAN}Configuration Files Created:${NC}"
    echo "  • ~/.config/hypr/keybinds.conf"
    echo "  • ~/.config/hypr/windowrules.conf"
    echo "  • ~/.config/hypr/rainbow.conf"
    echo "  • ~/.config/hypr/scripts/*.sh"
    echo
    echo -e "${PURPLE}To enable rainbow effects:${NC}"
    echo "  Run: Super + Alt + B or manually add to hyprland.conf:"
    echo "  source = ~/.config/hypr/rainbow.conf"
    echo
    warning "Reload Hyprland with Super + Ctrl + R to apply changes!"
}

# Run main function
main "$@"
